Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var delta = $Time.fps(30);
   var stepPlayer = F2(function (_v0,
   p) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return _U.replace([["pos"
                               ,{ctor: "_Tuple2"
                                ,_0: $Basics.toFloat(_v0._0)
                                ,_1: $Basics.toFloat(_v0._1)}]],
              p);}
         _U.badCase($moduleName,
         "on line 61, column 23 to 60");
      }();
   });
   var Add = function (a) {
      return {ctor: "Add",_0: a};
   };
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var Game = F2(function (a,b) {
      return {_: {}
             ,pills: b
             ,player: a};
   });
   var Pill = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,col: d
             ,pos: a
             ,rad: c
             ,vel: b};
   });
   var vecMulS = F2(function (_v4,
   t) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: _v4._0 * t
                   ,_1: _v4._1 * t};}
         _U.badCase($moduleName,
         "on line 31, column 20 to 28");
      }();
   });
   var vecLen = function (_v8) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple2":
            return $Basics.sqrt(_v8._0 * _v8._1 + _v8._1 * _v8._1);}
         _U.badCase($moduleName,
         "on line 28, column 17 to 32");
      }();
   };
   var vecSub = F2(function (_v12,
   _v13) {
      return function () {
         switch (_v13.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v12.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: _v12._0 - _v13._0
                           ,_1: _v12._1 - _v13._1};}
                 _U.badCase($moduleName,
                 "on line 25, column 27 to 39");
              }();}
         _U.badCase($moduleName,
         "on line 25, column 27 to 39");
      }();
   });
   var vecAdd = F2(function (_v20,
   _v21) {
      return function () {
         switch (_v21.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v20.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: _v20._0 + _v21._0
                           ,_1: _v20._1 + _v21._1};}
                 _U.badCase($moduleName,
                 "on line 22, column 27 to 39");
              }();}
         _U.badCase($moduleName,
         "on line 22, column 27 to 39");
      }();
   });
   var stepPill = F2(function (t,
   p) {
      return _U.replace([["pos"
                         ,vecAdd(p.pos)(A2(vecMulS,
                         p.vel,
                         t))]],
      p);
   });
   var center = function (_v28) {
      return function () {
         switch (_v28.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: _v28._0 / 2 | 0
                   ,_1: _v28._1 / 2 | 0};}
         _U.badCase($moduleName,
         "on line 17, column 18 to 32");
      }();
   };
   var $ = {ctor: "_Tuple2"
           ,_0: 400
           ,_1: 400},
   width = $._0,
   height = $._1;
   var $ = {ctor: "_Tuple2"
           ,_0: width / 2
           ,_1: height / 2},
   hWidth = $._0,
   hHeight = $._1;
   var defaultPill = {_: {}
                     ,col: $Color.lightRed
                     ,pos: {ctor: "_Tuple2"
                           ,_0: 0
                           ,_1: hHeight}
                     ,rad: 15
                     ,vel: {ctor: "_Tuple2"
                           ,_0: 0
                           ,_1: -30}};
   var defaultPlayer = _U.replace([["pos"
                                   ,{ctor: "_Tuple2",_0: 0,_1: 0}]
                                  ,["col",$Color.black]],
   defaultPill);
   var defaultGame = {_: {}
                     ,pills: _L.fromArray([])
                     ,player: defaultPlayer};
   var stepGame = F2(function (event,
   _v32) {
      return function () {
         return function () {
            switch (event.ctor)
            {case "Add":
               return _U.replace([["pills"
                                  ,A2($List._op["::"],
                                  event._0,
                                  _v32.pills)]],
                 _v32);
               case "Tick":
               switch (event._0.ctor)
                 {case "_Tuple2":
                    return function () {
                         var unculled = A2($List.filter,
                         function (pill) {
                            return _U.cmp($Basics.snd(pill.pos),
                            0 - hHeight) > 0;
                         },
                         _v32.pills);
                         var hit = function (pill) {
                            return _U.cmp(vecLen(A2(vecSub,
                            _v32.player.pos,
                            pill.pos)),
                            _v32.player.rad + pill.rad) < 0;
                         };
                         var untouched = A2($List.filter,
                         function ($) {
                            return $Basics.not(hit($));
                         },
                         unculled);
                         return _U.replace([["player"
                                            ,A2(stepPlayer,
                                            event._0._1,
                                            _v32.player)]
                                           ,["pills"
                                            ,A2($List.map,
                                            stepPill(event._0._0),
                                            untouched)]],
                         _v32);
                      }();}
                 break;}
            _U.badCase($moduleName,
            "between lines 52 and 58");
         }();
      }();
   });
   var render = F2(function (_v39,
   game) {
      return function () {
         switch (_v39.ctor)
         {case "_Tuple2":
            return function () {
                 var formPill = function (_v43) {
                    return function () {
                       return $Graphics$Collage.move(_v43.pos)($Graphics$Collage.filled(_v43.col)($Graphics$Collage.circle(_v43.rad)));
                    }();
                 };
                 var forms = A2($List._op["::"],
                 formPill(game.player),
                 A2($List.map,
                 formPill,
                 game.pills));
                 return $Graphics$Element.color($Color.lightGray)(A3($Graphics$Element.container,
                 _v39._0,
                 _v39._1,
                 $Graphics$Element.middle)($Graphics$Element.color($Color.white)(A3($Graphics$Collage.collage,
                 width,
                 height,
                 forms))));
              }();}
         _U.badCase($moduleName,
         "between lines 68 and 74");
      }();
   });
   var relativeMouse = F2(function (_v45,
   _v46) {
      return function () {
         switch (_v46.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v45.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: _v46._0 - _v45._0
                           ,_1: 0 - (_v46._1 - _v45._1)};}
                 _U.badCase($moduleName,
                 "on line 11, column 33 to 50");
              }();}
         _U.badCase($moduleName,
         "on line 11, column 33 to 50");
      }();
   });
   var input = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   A2($Signal.map,
   $Time.inSeconds,
   delta)),
   A2($Signal.sampleOn,
   delta,
   A3($Signal.map2,
   relativeMouse,
   A2($Signal.map,
   center,
   $Window.dimensions),
   $Mouse.position)));
   var event = A2($Signal.merge,
   A2($Signal.map,Tick,input),
   A2($Signal.map,
   function ($) {
      return Add(function (_v53) {
         return function () {
            return defaultPill;
         }();
      }($));
   },
   $Time.every($Time.second * 3)));
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   render,
   $Window.dimensions),
   A3($Signal.foldp,
   stepGame,
   defaultGame,
   event));
   _elm.Main.values = {_op: _op
                      ,relativeMouse: relativeMouse
                      ,height: height
                      ,width: width
                      ,hHeight: hHeight
                      ,hWidth: hWidth
                      ,center: center
                      ,vecAdd: vecAdd
                      ,vecSub: vecSub
                      ,vecLen: vecLen
                      ,vecMulS: vecMulS
                      ,Pill: Pill
                      ,defaultPill: defaultPill
                      ,defaultPlayer: defaultPlayer
                      ,Game: Game
                      ,defaultGame: defaultGame
                      ,Tick: Tick
                      ,Add: Add
                      ,stepGame: stepGame
                      ,stepPlayer: stepPlayer
                      ,stepPill: stepPill
                      ,render: render
                      ,delta: delta
                      ,input: input
                      ,event: event
                      ,main: main};
   return _elm.Main.values;
};